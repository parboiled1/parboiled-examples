package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param {
        return name;
    }
}
===
Invalid input '{', expected Whitespace, "/*", "//", Dim, ',' or ')' (line 3, pos 36):
    public String method(int param {
                                   ^
===
[CompilationUnit]E 'package org.parboiled.examples;\npublic class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
  [Optional] 'package org.parboiled.examples;\n'
    [PackageDeclaration] 'package org.parboiled.examples;\n'
      [Sequence] 'package org.parboiled.examples;\n'
        [QualifiedIdentifier] 'org.parboiled.examples'
          [Identifier] 'org'
          [ZeroOrMore] '.parboiled.examples'
            [Sequence] '.parboiled'
              [Identifier] 'parboiled'
            [Sequence] '.examples'
              [Identifier] 'examples'
  [ZeroOrMore]E 'public class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
    [TypeDeclaration]E 'public class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
      [Sequence]E 'public class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
        [ZeroOrMore] 'public '
          [Modifier] 'public '
            [Sequence] 'public '
              [FirstOf] 'public'
                ["public"] 'public'
        [FirstOf]E 'class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
          [ClassDeclaration]E 'class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
            [Identifier] 'JavaTestSource '
            [ClassBody]E '{\n    public String method(int param ){\n        return name;\n    }\n}\n'
              [ZeroOrMore]E 'public String method(int param ){\n        return name;\n    }\n'
                [ClassBodyDeclaration]E 'public String method(int param ){\n        return name;\n    }\n'
                  [Sequence]E 'public String method(int param ){\n        return name;\n    }\n'
                    [ZeroOrMore] 'public '
                      [Modifier] 'public '
                        [Sequence] 'public '
                          [FirstOf] 'public'
                            ["public"] 'public'
                    [MemberDecl]E 'String method(int param ){\n        return name;\n    }\n'
                      [Sequence]E 'String method(int param ){\n        return name;\n    }\n'
                        [Type] 'String '
                          [FirstOf] 'String '
                            [ClassType] 'String '
                              [Identifier] 'String '
                        [Identifier] 'method'
                        [MethodDeclaratorRest]E '(int param ){\n        return name;\n    }\n'
                          [FormalParameters]E '(int param )'
                            [Optional] 'int param '
                              [FormalParameterDecls] 'int param '
                                [Type] 'int '
                                  [FirstOf] 'int '
                                    [BasicType] 'int '
                                      [FirstOf] 'int'
                                        ["int"] 'int'
                                [FormalParameterDeclsRest] 'param '
                                  [Sequence] 'param '
                                    [VariableDeclaratorId] 'param '
                                      [Identifier] 'param '
                          [FirstOf] '{\n        return name;\n    }\n'
                            [MethodBody] '{\n        return name;\n    }\n'
                              [BlockStatements] 'return name;\n    '
                                [BlockStatement] 'return name;\n    '
                                  [Statement] 'return name;\n    '
                                    [Sequence] 'return name;\n    '
                                      [Optional] 'name'
                                        [Expression] 'name'
                                          [ConditionalExpression] 'name'
                                            [ConditionalOrExpression] 'name'
                                              [ConditionalAndExpression] 'name'
                                                [InclusiveOrExpression] 'name'
                                                  [ExclusiveOrExpression] 'name'
                                                    [AndExpression] 'name'
                                                      [EqualityExpression] 'name'
                                                        [RelationalExpression] 'name'
                                                          [ShiftExpression] 'name'
                                                            [AdditiveExpression] 'name'
                                                              [MultiplicativeExpression] 'name'
                                                                [UnaryExpression] 'name'
                                                                  [Sequence] 'name'
                                                                    [Primary] 'name'
                                                                      [Sequence] 'name'
                                                                        [QualifiedIdentifier] 'name'
                                                                          [Identifier] 'name'
  [EOI]
###
package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param) {
        String name = toString(;
        return name;
    }
}
===
Invalid input ';', expected Spacing, Expression or ')' (line 4, pos 32):
        String name = toString(;
                               ^
===
[CompilationUnit]E 'package org.parboiled.examples;\npublic class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
  [Optional] 'package org.parboiled.examples;\n'
    [PackageDeclaration] 'package org.parboiled.examples;\n'
      [Sequence] 'package org.parboiled.examples;\n'
        [QualifiedIdentifier] 'org.parboiled.examples'
          [Identifier] 'org'
          [ZeroOrMore] '.parboiled.examples'
            [Sequence] '.parboiled'
              [Identifier] 'parboiled'
            [Sequence] '.examples'
              [Identifier] 'examples'
  [ZeroOrMore]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
    [TypeDeclaration]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
      [Sequence]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
        [ZeroOrMore] 'public '
          [Modifier] 'public '
            [Sequence] 'public '
              [FirstOf] 'public'
                ["public"] 'public'
        [FirstOf]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
          [ClassDeclaration]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
            [Identifier] 'JavaTestSource '
            [ClassBody]E '{\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
              [ZeroOrMore]E 'public String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                [ClassBodyDeclaration]E 'public String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                  [Sequence]E 'public String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                    [ZeroOrMore] 'public '
                      [Modifier] 'public '
                        [Sequence] 'public '
                          [FirstOf] 'public'
                            ["public"] 'public'
                    [MemberDecl]E 'String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                      [Sequence]E 'String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                        [Type] 'String '
                          [FirstOf] 'String '
                            [ClassType] 'String '
                              [Identifier] 'String '
                        [Identifier] 'method'
                        [MethodDeclaratorRest]E '(int param) {\n        String name = toString();\n        return name;\n    }\n'
                          [FormalParameters] '(int param) '
                            [Optional] 'int param'
                              [FormalParameterDecls] 'int param'
                                [Type] 'int '
                                  [FirstOf] 'int '
                                    [BasicType] 'int '
                                      [FirstOf] 'int'
                                        ["int"] 'int'
                                [FormalParameterDeclsRest] 'param'
                                  [Sequence] 'param'
                                    [VariableDeclaratorId] 'param'
                                      [Identifier] 'param'
                          [FirstOf]E '{\n        String name = toString();\n        return name;\n    }\n'
                            [MethodBody]E '{\n        String name = toString();\n        return name;\n    }\n'
                              [BlockStatements]E 'String name = toString();\n        return name;\n    '
                                [BlockStatement]E 'String name = toString();\n        '
                                  [LocalVariableDeclarationStatement]E 'String name = toString();\n        '
                                    [Type] 'String '
                                      [FirstOf] 'String '
                                        [ClassType] 'String '
                                          [Identifier] 'String '
                                    [VariableDeclarators]E 'name = toString()'
                                      [VariableDeclarator]E 'name = toString()'
                                        [Identifier] 'name '
                                        [Optional]E '= toString()'
                                          [Sequence]E '= toString()'
                                            [VariableInitializer]E 'toString()'
                                              [Expression]E 'toString()'
                                                [ConditionalExpression]E 'toString()'
                                                  [ConditionalOrExpression]E 'toString()'
                                                    [ConditionalAndExpression]E 'toString()'
                                                      [InclusiveOrExpression]E 'toString()'
                                                        [ExclusiveOrExpression]E 'toString()'
                                                          [AndExpression]E 'toString()'
                                                            [EqualityExpression]E 'toString()'
                                                              [RelationalExpression]E 'toString()'
                                                                [ShiftExpression]E 'toString()'
                                                                  [AdditiveExpression]E 'toString()'
                                                                    [MultiplicativeExpression]E 'toString()'
                                                                      [UnaryExpression]E 'toString()'
                                                                        [Sequence]E 'toString()'
                                                                          [Primary]E 'toString()'
                                                                            [Sequence]E 'toString()'
                                                                              [QualifiedIdentifier] 'toString'
                                                                                [Identifier] 'toString'
                                                                              [Optional]E '()'
                                                                                [IdentifierSuffix]E '()'
                                                                                  [Arguments]E '()'
                                [BlockStatement] 'return name;\n    '
                                  [Statement] 'return name;\n    '
                                    [Sequence] 'return name;\n    '
                                      [Optional] 'name'
                                        [Expression] 'name'
                                          [ConditionalExpression] 'name'
                                            [ConditionalOrExpression] 'name'
                                              [ConditionalAndExpression] 'name'
                                                [InclusiveOrExpression] 'name'
                                                  [ExclusiveOrExpression] 'name'
                                                    [AndExpression] 'name'
                                                      [EqualityExpression] 'name'
                                                        [RelationalExpression] 'name'
                                                          [ShiftExpression] 'name'
                                                            [AdditiveExpression] 'name'
                                                              [MultiplicativeExpression] 'name'
                                                                [UnaryExpression] 'name'
                                                                  [Sequence] 'name'
                                                                    [Primary] 'name'
                                                                      [Sequence] 'name'
                                                                        [QualifiedIdentifier] 'name'
                                                                          [Identifier] 'name'
  [EOI]
###
package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param) {
        String name = toString();
        return name
    }
}
===
Invalid input '}', expected Whitespace, "/*", "//", '.', IdentifierSuffix, Selector, PostFixOp, '*', '/', '%', '+', '-', '<<', '>>', '>>>', '<=', '>=', '<', '>', 'instanceof', '==', '!=', '&', '^', '|', '&&', '||', '?', AssignmentOperator or ';' (line 6, pos 5):
    }
    ^
===
[CompilationUnit]E 'package org.parboiled.examples;\npublic class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
  [Optional] 'package org.parboiled.examples;\n'
    [PackageDeclaration] 'package org.parboiled.examples;\n'
      [Sequence] 'package org.parboiled.examples;\n'
        [QualifiedIdentifier] 'org.parboiled.examples'
          [Identifier] 'org'
          [ZeroOrMore] '.parboiled.examples'
            [Sequence] '.parboiled'
              [Identifier] 'parboiled'
            [Sequence] '.examples'
              [Identifier] 'examples'
  [ZeroOrMore]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
    [TypeDeclaration]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
      [Sequence]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
        [ZeroOrMore] 'public '
          [Modifier] 'public '
            [Sequence] 'public '
              [FirstOf] 'public'
                ["public"] 'public'
        [FirstOf]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
          [ClassDeclaration]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
            [Identifier] 'JavaTestSource '
            [ClassBody]E '{\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
              [ZeroOrMore]E 'public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                [ClassBodyDeclaration]E 'public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                  [Sequence]E 'public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                    [ZeroOrMore] 'public '
                      [Modifier] 'public '
                        [Sequence] 'public '
                          [FirstOf] 'public'
                            ["public"] 'public'
                    [MemberDecl]E 'String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                      [Sequence]E 'String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                        [Type] 'String '
                          [FirstOf] 'String '
                            [ClassType] 'String '
                              [Identifier] 'String '
                        [Identifier] 'method'
                        [MethodDeclaratorRest]E '(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                          [FormalParameters] '(int param) '
                            [Optional] 'int param'
                              [FormalParameterDecls] 'int param'
                                [Type] 'int '
                                  [FirstOf] 'int '
                                    [BasicType] 'int '
                                      [FirstOf] 'int'
                                        ["int"] 'int'
                                [FormalParameterDeclsRest] 'param'
                                  [Sequence] 'param'
                                    [VariableDeclaratorId] 'param'
                                      [Identifier] 'param'
                          [FirstOf]E '{\n        String name = toString();\n        return name\n    ;}\n'
                            [MethodBody]E '{\n        String name = toString();\n        return name\n    ;}\n'
                              [BlockStatements]E 'String name = toString();\n        return name\n    ;'
                                [BlockStatement] 'String name = toString();\n        '
                                  [LocalVariableDeclarationStatement] 'String name = toString();\n        '
                                    [Type] 'String '
                                      [FirstOf] 'String '
                                        [ClassType] 'String '
                                          [Identifier] 'String '
                                    [VariableDeclarators] 'name = toString()'
                                      [VariableDeclarator] 'name = toString()'
                                        [Identifier] 'name '
                                        [Optional] '= toString()'
                                          [Sequence] '= toString()'
                                            [VariableInitializer] 'toString()'
                                              [Expression] 'toString()'
                                                [ConditionalExpression] 'toString()'
                                                  [ConditionalOrExpression] 'toString()'
                                                    [ConditionalAndExpression] 'toString()'
                                                      [InclusiveOrExpression] 'toString()'
                                                        [ExclusiveOrExpression] 'toString()'
                                                          [AndExpression] 'toString()'
                                                            [EqualityExpression] 'toString()'
                                                              [RelationalExpression] 'toString()'
                                                                [ShiftExpression] 'toString()'
                                                                  [AdditiveExpression] 'toString()'
                                                                    [MultiplicativeExpression] 'toString()'
                                                                      [UnaryExpression] 'toString()'
                                                                        [Sequence] 'toString()'
                                                                          [Primary] 'toString()'
                                                                            [Sequence] 'toString()'
                                                                              [QualifiedIdentifier] 'toString'
                                                                                [Identifier] 'toString'
                                                                              [Optional] '()'
                                                                                [IdentifierSuffix] '()'
                                                                                  [Arguments] '()'
                                [BlockStatement]E 'return name\n    ;'
                                  [Statement]E 'return name\n    ;'
                                    [Sequence]E 'return name\n    ;'
                                      [Optional] 'name\n    '
                                        [Expression] 'name\n    '
                                          [ConditionalExpression] 'name\n    '
                                            [ConditionalOrExpression] 'name\n    '
                                              [ConditionalAndExpression] 'name\n    '
                                                [InclusiveOrExpression] 'name\n    '
                                                  [ExclusiveOrExpression] 'name\n    '
                                                    [AndExpression] 'name\n    '
                                                      [EqualityExpression] 'name\n    '
                                                        [RelationalExpression] 'name\n    '
                                                          [ShiftExpression] 'name\n    '
                                                            [AdditiveExpression] 'name\n    '
                                                              [MultiplicativeExpression] 'name\n    '
                                                                [UnaryExpression] 'name\n    '
                                                                  [Sequence] 'name\n    '
                                                                    [Primary] 'name\n    '
                                                                      [Sequence] 'name\n    '
                                                                        [QualifiedIdentifier] 'name\n    '
                                                                          [Identifier] 'name\n    '
  [EOI]

/*
 * Copyright (C) 2009-2010 Mathias Doenitz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.parboiled.examples.java;

import org.parboiled.Node;
import org.parboiled.Parboiled;
import org.parboiled.ParserStatistics;

import static org.parboiled.support.ParseTreeUtils.printNodeTree;

public class SimpleJavaTest {

    private char \u0041_identifierWithNonAsciiCharacters_åäöÅÄÖ_\u0030_$ = '\u0061';

    @SuppressWarnings("unused")
    private char[] octalEscapes = new char[] {'\1', '\12', '\123'};

    @Test
    public void simpleJavaTest() {
        String testSource = FileUtils.readAllTextFromResource("SimpleJavaTest.java");
        JavaParser parser = Parboiled.createParser(JavaParser.class);
        Rule compilationUnit = parser.CompilationUnit();

        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +
                "Parser statistics for rule 'CompilationUnit':\n" +
                "MemoMismatchesMatchers: 7\n");

        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);
        if (parsingResult.hasErrors()) {
            fail("\n--- ParseErrors ---\n" +
                    StringUtils.join(parsingResult.parseErrors, "---\n") +
                    "\n--- ParseTree ---\n" +
                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())
            );
        }
        assertEquals(
                printTree(parsingResult.parseTreeRoot, new Formatter<Node<Object>>() {
                    public String format(Node<Object> node) {
                        return node.toString();
                    }
                }, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),
                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")
        );
    }

}
